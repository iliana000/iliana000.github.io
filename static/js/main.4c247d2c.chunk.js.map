{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","houses","data","templates","self","axios","defaults","baseURL","get","then","response","setState","console","dir","catch","error","log","list","map","_ref","full_address","images","price","area","id","react_default","a","createElement","Grid_default","item","xs","key","className","src","container","spacing","Button_default","variant","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"uPA6EeA,cAnEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAQ,CACNC,KAAM,IAERC,UAAW,IANIV,mFAWjB,IAAIW,EAAOR,KAEXS,IAAMC,SAASC,QAAU,iCACzBF,IAAMG,IAAI,eACPC,KAAK,SAAUC,GAEdN,EAAKO,SAAU,CAACV,OAAQS,EAASR,OACjCU,QAAQC,IAAIH,EAASR,QAEtBY,MAAM,SAAUC,GAEfH,QAAQI,IAAID,KAEbN,KAAK,+CAOR,IAAIQ,EAoBJ,OAnBAL,QAAQC,IAAIjB,KAAKI,MAAMC,OAAOC,MAC9Be,EAAOrB,KAAKI,MAAMC,OAAOC,KAAKgB,IAAK,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,aAAaC,EAAfF,EAAeE,OAAOC,EAAtBH,EAAsBG,MAAMC,EAA5BJ,EAA4BI,KAAKC,EAAjCL,EAAiCK,GAAjC,OAE/BC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,IAAKP,GACrBC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QACbP,EAAAC,EAAAC,cAAA,UAAKP,GACLK,EAAAC,EAAAC,cAAA,OAAKM,IAAKZ,EAAO,KACjBI,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMQ,WAAS,GACbT,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,MAAI,EAACC,GAAI,GACbL,EAAAC,EAAAC,cAAA,UAAKL,IAEPG,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,MAAI,EAACC,GAAI,GACbL,EAAAC,EAAAC,cAAA,UAAKJ,SAQfE,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,UAAQK,UAAU,cAChBP,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMQ,WAAS,EAACC,QAAS,IACtBlB,GAEHQ,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAQW,QAAQ,YAAYC,MAAM,WAAlC,mBA3DQC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC,6FEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.4c247d2c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport axios from 'axios';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      houses: {\n        data: []\n      },\n      templates: []\n    }\n  }\n  componentDidMount() {\n\n    let self = this;\n\n    axios.defaults.baseURL = 'http://demo4452328.mockable.io';\n    axios.get('/properties')\n      .then(function (response) {\n        // handle success\n        self.setState( {houses: response.data} );\n        console.dir(response.data);\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      })\n      .then(function () {\n        // always executed\n      });\n\n  }\n\n  render() {\n    let list = [];\n    console.dir(this.state.houses.data);\n    list = this.state.houses.data.map( ({full_address,images,price,area,id}) =>\n      (\n        <Grid item xs={6} key={id}>\n          <div className=\"card\">\n            <h4>{full_address}</h4>\n            <img src={images[0]}/>\n            <Grid container>\n              <Grid item xs={6}>\n                <h4>{price}</h4>\n              </Grid>\n              <Grid item xs={6}>\n                <h4>{area}</h4>\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n      )\n    );\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Grid container spacing={32}>\n            {list}\n          </Grid>\n          <Button variant=\"contained\" color=\"primary\">\n            Cool !\n          </Button>\n        </header>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}