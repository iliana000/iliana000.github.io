{"version":3,"sources":["components/Address.js","components/Area.js","components/Image.js","components/Price.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Address","react_default","a","createElement","className","this","props","full_address","Component","Area","area","Image","styles","backgroundColor","backgroundImage","concat","images","style","title","Price","price","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","houses","templates","self","axios","defaults","baseURL","all","get","then","spread","setState","data","console","dir","catch","error","log","length","src","logo","alt","list","map","_ref","id","Grid_default","item","xs","key","components_Address","components_Image","container","components_Price","components_Area","spacing","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"2OAaeA,mLANX,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWC,KAAKC,MAAMC,qBAJpBC,aCSPC,mLANX,OACEJ,KAAKC,MAAMI,KAAOT,EAAAC,EAAAC,cAAA,yDAAcE,KAAKC,MAAMI,MAAa,UAJ3CF,aCeJG,mLAXX,IAAMC,EAAS,CACbC,gBAAiB,sBACjBC,gBAAe,OAAAC,OAASV,KAAKC,MAAMU,OAAO,GAA3B,MAGjB,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQa,MAAOL,EAAQM,MAAO,4BAAQb,KAAKC,MAAMC,cAAhE,YATcC,aCQLW,mLANX,OACElB,EAAAC,EAAAC,cAAA,eAAOE,KAAKC,MAAMc,cAJJZ,aCmFLa,cA1Eb,SAAAA,EAAYf,GAAO,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,KAAMC,KACDsB,MAAQ,CACXC,OAAQ,GACRC,UAAW,IAJIR,mFASjB,IAAIS,EAAO1B,KAEX2B,IAAMC,SAASC,QAAU,iCACzBF,IAAMG,IAAI,CAkBDH,IAAMI,IAAI,eAIVJ,IAAMI,IAAI,gBArBhBC,KAAKL,IAAMM,OAAO,SAAUT,EAAQC,GAEnCC,EAAKQ,SAAU,CACbV,OAAQA,EAAOW,KAAKA,KACpBV,UAAWA,EAAUU,OAEvBC,QAAQC,IAAIZ,MAEba,MAAM,SAAUC,GAEfH,QAAQI,IAAID,KAEbP,KAAK,+CAeR,IAAKhC,KAAKuB,MAAMC,OAAOiB,OAErB,OACE7C,EAAAC,EAAAC,cAAA,OAAK4C,IAAKC,IAAM5C,UAAU,UAAU6C,IAAI,qDAG5C,IAAIC,EAoBJ,OAnBAT,QAAQC,IAAIrC,KAAKuB,MAAME,WACvBoB,EAAO7C,KAAKuB,MAAMC,OAAOsB,IAAK,SAAAC,GAAA,IAAE7C,EAAF6C,EAAE7C,aAAaS,EAAfoC,EAAepC,OAAOI,EAAtBgC,EAAsBhC,MAAMV,EAA5B0C,EAA4B1C,KAAK2C,EAAjCD,EAAiCC,GAAjC,OAE1BpD,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAMqD,MAAI,EAACC,GAAI,EAAGC,IAAKJ,GACrBpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACuD,EAAD,CAASnD,aAAcA,IACvBN,EAAAC,EAAAC,cAACwD,EAAD,CAAOpD,aAAcA,EAAcS,OAAQA,IAC3Cf,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAM0D,WAAS,GACb3D,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAMqD,MAAI,EAACC,GAAI,GACbvD,EAAAC,EAAAC,cAAC0D,EAAD,CAAOzC,MAAOA,KAEhBnB,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAMqD,MAAI,EAACC,GAAI,GACbvD,EAAAC,EAAAC,cAAC2D,EAAD,CAAMpD,KAAMA,UAQtBT,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAM0D,WAAS,EAACG,QAAS,IACtBb,UAtES1C,aCCEwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC,wDEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.e3d06daa.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\nimport Grid from '@material-ui/core/Grid';\n\nclass Address extends Component {\n\n  render() {\n    return (\n      <h5 className='address'>{this.props.full_address}</h5>\n    );\n  }\n}\n\nexport default Address;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport Grid from '@material-ui/core/Grid';\n\nclass Area extends Component {\n\n  render() {\n    return (\n      this.props.area ? <h5>Площадь: {this.props.area}</h5> : ''\n    );\n  }\n}\n\nexport default Area;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport Grid from '@material-ui/core/Grid';\n\n\nclass Image extends Component {\n\n  render() {\n    const styles = {\n      backgroundColor: 'rgba(255,255,255,.1',\n      backgroundImage: `url(${this.props.images[0]})`\n    };\n\n    return (\n      <div className=\"image\" style={styles} title={\"Фото \"+this.props.full_address}> </div>\n    );\n  }\n}\n\nexport default Image;\n//\n// <div className=\"image\" style={{backgroundImage: \"this.props.images[0]\"}} title={\"Фото \"+this.props.full_address}> </div>","import React, { Component } from 'react';\nimport '../App.css';\nimport Grid from '@material-ui/core/Grid';\n\nclass Price extends Component {\n\n  render() {\n    return (\n      <h3>$ {this.props.price}</h3>\n    );\n  }\n}\n\nexport default Price;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid';\nimport axios from 'axios';\nimport logo from './logo.svg';\n\nimport Address from \"./components/Address\";\nimport Area from \"./components/Area\";\nimport Image from \"./components/Image\";\nimport Price from \"./components/Price\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      houses: [],\n      templates: []\n    }\n  }\n  componentDidMount() {\n\n    let self = this;\n\n    axios.defaults.baseURL = 'http://demo4452328.mockable.io';\n    axios.all([getHouses(), getTemplates()])\n      .then(axios.spread(function (houses, templates) {\n        // Both requests are now complete\n        self.setState( {\n          houses: houses.data.data,\n          templates: templates.data\n        } );\n        console.dir(templates);\n      }))\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      })\n      .then(function () {\n        // always executed\n      });\n\n    function getHouses() {\n      return axios.get('/properties');\n    }\n\n    function getTemplates() {\n      return axios.get('/templates');\n    }\n\n  }\n\n  render() {\n    if (!this.state.houses.length) {\n      // alert('here');\n      return (\n        <img src={logo} className=\"loading\" alt=\"Загрузка\"/>\n      )\n    }\n    let list = [];\n    console.dir(this.state.templates);\n    list = this.state.houses.map( ({full_address,images,price,area,id}) =>\n      (\n        <Grid item xs={6} key={id}>\n          <div className=\"card\">\n            <Address full_address={full_address} />\n            <Image full_address={full_address} images={images} />\n            <Grid container>\n              <Grid item xs={6}>\n                <Price price={price} />\n              </Grid>\n              <Grid item xs={6}>\n                <Area area={area} />\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n      )\n    );\n    return (\n      <Grid container spacing={32}>\n        {list}\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}